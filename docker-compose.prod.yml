version: '3.8'

services:
  web:
    build: 
      context: ./app
      dockerfile: Dockerfile.prod
    command: gunicorn iverkeer.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - ./app:/home/app/web #mount the project dir
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
    expose:
      - 8000
    env_file:
      - ./.env.prod
    depends_on:
      - db
    labels:
      - traefik.enable=false
      
  db:
    image: postgis/postgis:13-master
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.prod.db
    labels:
      - traefik.enable=false
      
  nginx:
    build: ./nginx
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
    ports:
      - 1337:80
    depends_on:
      - web
      - redis
    labels:
      - traefik.http.routers.iverkeer.rule=Host(`iverkeer.muizeluuk.nl`)
      - traefik.http.routers.iverkeer.tls=true
      - traefik.http.routers.iverkeer.tls.certresolver=lets-encrypt
      - traefik.port=1337
    networks:
      - internal
      - web

  redis:
    image: redis:alpine
    labels:
      - traefik.enable=false

  celery:
    build: 
      context: ./app
      dockerfile: Dockerfile.prod
    command: celery -A iverkeer worker -l info
    env_file:
      #- ./.env.prod.celery
      - ./.env.prod
    depends_on:
      - redis
      - db
    labels:
      - traefik.enable=false
      
  celery-beat:
    build: 
      context: ./app
      dockerfile: Dockerfile.prod
    command: celery -A iverkeer beat -l debug
    env_file:
      #- ./.env.prod.celery
      - ./.env.prod
    depends_on: 
      - redis
      - db
      - web
    labels:
      - traefik.enable=false
      
volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  web:
    external: true
  internal:
    external: false
